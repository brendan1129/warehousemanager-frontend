// api.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export type Company = {
    companyName: string;
    companyDescription: string;
}
export type CompanyData = {
    company_id: Number;
    companyName: string;
    companyDescription: string;
}
export type Warehouse = {
    warehouseName: String;
    company_id: Number;
    maxCapacity: Number;
}
export type WarehouseData = {
  warehouse_id: Number;
  warehouseName: String;
  company_id: Number;
  maxCapacity: Number;
}
export type Item = {
  itemName: String;
  quantity: Number;
  warehouse_id: Number;
}
export type ItemData = {
  item_id: Number;
  itemName: String;
  quantity: Number;
  warehouse_id: Number;
}
// Define your API endpoints here
export const companyApi = createApi({
  reducerPath: "companyApi",
  baseQuery: fetchBaseQuery({ 
    baseUrl: "http://localhost:8080/api",
  }),
  tagTypes: ["company", "warehouse", "item"], // Adjust the base URL to your API endpoint

  endpoints: (builder) => ({
    // Define your endpoints here
    // Example endpoint:

    getCompanyByName: builder.query<CompanyData, String>({
        query: (companyName) => `/companies/byname/${companyName}`,
        providesTags: ["company"]
    }),
    getAllCompanies: builder.query<CompanyData[], void>({
        query: () => "/companies",
        providesTags: ["company"]
    }),
    findWarehousesByCompanyName: builder.query<WarehouseData[], String>({
        query: (companyName) => `warehouses/findByCompanyName?companyName=${companyName}`,
        providesTags: ["warehouse"]
    }),
    findItemsByCompanyAndWarehouseName: builder.query<ItemData[], { companyName: string; warehouseName: string }>({
      query: ({ companyName, warehouseName }) => ({
        url: decodeURI("warehouse-items/" + companyName + "/" + warehouseName),
      }),
      providesTags: ["item"],
    }),
    addCompany: builder.mutation<void, Company>({
        query: (company) => ({
            method: "POST",
            url: "/companies",
            body: company,
        }),
        invalidatesTags: ["company"],
    }),
    addWarehouse: builder.mutation<void, Warehouse>({
        query: (warehouse) => ({
          url: 'warehouses/create',
          method: 'POST',
          body: warehouse,
        }),
        invalidatesTags: ["warehouse"]
    }),
    updateWarehouse: builder.mutation<Warehouse, { warehouseId: number; updatedWarehouse: Warehouse }>({
      query: ({ warehouseId, updatedWarehouse }) => ({
        url: `/warehouses/${warehouseId}/update`,
        method: 'PUT',
        body: updatedWarehouse,
        }),
        invalidatesTags: ["warehouse"]
    }),
    deleteCompany: builder.mutation<void, Number>({
        query: (id) => ({
          method: "DELETE",
          url: `/companies/${id}`
        }),
        invalidatesTags: ["company"],
    }),
    deleteWarehouse: builder.mutation<void, Number>({
      query: (id) => ({
        method: "DELETE",
        url: `/warehouses/${id}`
      }),
      invalidatesTags: ["warehouse"],
  }),
  }),
});
// Export hooks generated by RTK Query
export const { 
    useGetAllCompaniesQuery,
    useGetCompanyByNameQuery,
    useFindItemsByCompanyAndWarehouseNameQuery,
    useFindWarehousesByCompanyNameQuery,
    useAddCompanyMutation,
    useAddWarehouseMutation,
    useUpdateWarehouseMutation,
    useDeleteCompanyMutation,
    useDeleteWarehouseMutation
} = companyApi;
